
[gcode_arcs]
resolution: 0.5




[stepper_x]
step_pin: PB13
dir_pin: PB12
enable_pin: !PB14
microsteps: 32
rotation_distance: 40
endstop_pin: tmc2209_stepper_x:virtual_endstop
#position_endstop: -190
#position_min: -190
#position_max: 200
position_endstop: 0
full_steps_per_rotation: 200
#position_min: 0
position_max: 200
homing_speed: 20
homing_retract_dist: 5
#homing_positive_dir: true


[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
diag_pin: ^PC0
uart_address: 0
interpolate: False
run_current: 0.5
driver_SGTHRS: 70
stealthchop_threshold: 0


[stepper_y]
step_pin: PB10
dir_pin: PB2
enable_pin: !PB11
microsteps: 32
rotation_distance: 40
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: 0
homing_speed: 50
homing_retract_dist: 5
#homing_positive_dir: true
position_min: -9
position_max: 200

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
diag_pin: ^PC1
uart_address: 2
interpolate: False
driver_SGTHRS: 80
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0   

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 32
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_min: -3
position_max: 200
homing_speed: 20
second_homing_speed: 3.0
homing_retract_dist: 3.0

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
diag_pin: PC2
uart_address: 1
interpolate: False
run_current: 0.580
sense_resistor: 0.110
stealthchop_threshold: 0 

[safe_z_home]                         # enable for BLTouch
home_xy_position: 120,120
speed: 50
z_hop: 10
z_hop_speed: 5

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 32
rotation_distance: 32.050
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_only_distance: 1000
pressure_advance: 0.0
pressure_advance_smooth_time: 0.040
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
pid_Kp: 28.182
pid_Ki: 1.978
pid_Kd: 100.397
min_temp: 0
max_temp: 295

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.620
interpolate: False
stealthchop_threshold: 0
sense_resistor: 0.110

[heater_bed]
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
pid_Kp: 13.195
pid_Ki: 0.603
pid_Kd: 72.242
min_temp: 0
max_temp: 130


[heater_fan nozzle_cooling_fan]
pin: PC7

[fan]
pin: PC6

[idle_timeout]
timeout: 1800


[heater_fan hotend_fan]
pin: PB15
heater: extruder
heater_temp: 50.0

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_39001C000750434E37343120-if00

[printer]
kinematics: cartesian
max_velocity: 100
max_accel: 1500
max_z_velocity: 25
max_z_accel: 30
square_corner_velocity: 1


[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type: st7920
cs_pin: PB8
sclk_pin: PB9
sid_pin: PD6
encoder_pins: ^PA10, ^PA9
click_pin: ^!PA15

[output_pin beeper]
pin: EXP1_1

[bltouch]
sensor_pin: ^PC14
control_pin: PA1
##x_offset: -190
##y_offset: 0
x_offset: -10
y_offset: -6  
z_offset: 3.6
speed: 5.0
sample_retract_dist: 3.69
lift_speed: 40
samples: 1

[bed_mesh]
speed: 50
horizontal_move_z: 5
mesh_min: 20,6
mesh_max: 166,166
probe_count: 4,4
algorithm: bicubic


#[gcode_macro SCREWS_CALCULATE]
#gcode:
#SCREWS_TILT_CALCULATE

[virtual_sdcard]
path: /home/andre/printer_data/gcodes


#[input_shaper]
##shaper_freq_x: 77.8
#shaper_type_x: 3hump_ei
#shaper_freq_y: 33.6
#shaper_type_y: mzv


#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    115,115,20


#[filament_switch_sensor RunoutSensor]
#switch_pin: PC15 # Pin ESTOP-Y for Spider mcu
#pause_on_runout: true
#runout_gcode: M600  # Move nozzle to a location thats easy for the user to access

#####################################################################
#  Filament change macro M600
#####################################################################

[gcode_macro G29]
gcode:
 BED_MESH_CLEAR
 G28
 #x_offset: -13
 #y_offset: 35
 G0 X43 Y-5 Z20 F4000 # provoca a descida da sonda
 BED_MESH_CALIBRATE
 G0 Z2 F500 # comprime a sonda o suficiente para retra√≠-la
 G0 Z20 F500


[filament_switch_sensor RunoutSensor]
switch_pin: PC15 # Pin ESTOP-Y for Spider mcu
pause_on_runout: true
runout_gcode: M600  # Move nozzle to a location thats easy for the user to access

#####################################################################
#  Filament change macro M600
#####################################################################

[gcode_macro M600]
variable_park_x: 50 # try half your bed size.
variable_park_y: 10
variable_z_lift: 50
variable_velocity: 60
variable_retract: 0.5
gcode:
    SAVE_GCODE_STATE NAME=STATE_M600    # remembers the position
   
    PAUSE_BASE    
    # Fluidd redifines PAUSE to move the the back corner of the printer.  We don't want that.  This is what Fluidd renamed basic pause to.
    # Mainsail renames PAUSE to "BASE_PAUSE", so you should probably use that instead.  If using other software, probably just use PAUSE.  
   
    # safe park coords
    {% set th = printer.toolhead %}
    {% set park_x = [params.X|default(park_x)|int, th.axis_maximum.x-2]|min %}
    {% set park_y = [params.Y|default(park_y)|int, th.axis_maximum.y-10]|min %}
    {% set park_z = [th.position.z + params.Z_LIFT|default(z_lift)|int, th.axis_maximum.z]|min %}
    {% set park_feedrate = params.VELOCITY|default(velocity)|int * 60 %}
   
    # retract at 50mm/sec
    G91
    G1 E-{retract} F3000
   
    # park toolhead
    G90
    G0 X{park_x} Y{park_y} Z{park_z} F{park_feedrate}
   
    # Tell user to reload filament
    M117 Reload Filament
   
    RESTORE_GCODE_STATE NAME=STATE_M600


[pause_resume]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.059063, -0.260000, -0.321563
#*# 	  0.289062, 0.097187, -0.082188
#*# 	  0.495937, 0.297812, 0.116875
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 64.81
#*# max_x = 134.76
#*# min_y = 79.69
#*# max_y = 120.29
